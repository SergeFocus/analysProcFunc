////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мИсходныеДанные, мВысотаЭлементаСекции, мЦветФонаЭлементаСекции, мДанныеОВхождениях, мМаксимальныйУровеньИтерации;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Источник: https://infostart.ru/public/95428/
Функция ИзХСчислВDec(ИсходноеЧисло, Шаблон = "0123456789ABCDEF")
    ИсходноеЧисло = ВРег(ИсходноеЧисло); // на всякий случай.
    ДлинаШаблона = СтрДлина(Шаблон);

    ДлинаСтроки = СтрДлина(ИсходноеЧисло);
    Результат = 0;

    Для ТекСимвол = 1 По ДлинаСтроки Цикл
        ОбрабатываемыйСимвол = Сред(ИсходноеЧисло, ТекСимвол,1);
        ПозицияВШаблоне = Найти(Шаблон,ОбрабатываемыйСимвол)-1;
        Результат = Результат * ДлинаШаблона + ПозицияВШаблоне;
    КонецЦикла;

    Возврат(Результат);

КонецФункции // ИзХСчислВDec()

Процедура ВыполнитьОтметкуСвязанныхПослеВводауровняИтерации(Число, ДополнительныеПараметры) Экспорт
	
	Если Не Число = Неопределено Тогда 
		мМаксимальныйУровеньИтерации = Число;
		ОтметитьСвязанные(ДополнительныеПараметры.Режим);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОтметкуСвязанныхПослеВводауровняИтерации()

Функция ПолучитьТекстGML()
	
	лГруппы            = "";
	лСодержимоеСекций  = "";
	лСвязиСекций       = "";

	лДобавленныеМодули = Новый Массив;
	Для Каждого секция Из мДанныеОВхождениях Цикл
		
		Если НЕ Фильтр.НайтиПоЗначению(секция.Идентификатор).Пометка Тогда 
			Продолжить;
		КонецЕсли;
		
		Если лДобавленныеМодули.Найти(секция.ИдМодуля) = Неопределено Тогда 
			лДобавленныеМодули.Добавить(секция.ИдМодуля);
			Шаблон = ПолучитьШаблон("ГруппаМодуль");
			лТекущаяГруппа = СтрЗаменить(Шаблон        , "%id%"   , секция.ИдМодуля);
			лТекущаяГруппа = СтрЗаменить(лТекущаяГруппа, "%label%", секция.ИмяМодуля);
			лГруппы = лГруппы + Символы.ПС + лТекущаяГруппа
	 	КонецЕсли;
		
		//////////////////////////////////////
		// формирование содержимого секции
		
		// Тип, Имя, Количество, Вхождения, Рекурсия
		Шаблон = ПолучитьШаблон("СодержимоеСекции");
		
		Если секция.Тип = "Процедура" Тогда 
			лТипЭлемента = "rectangle";
		Иначе
			лТипЭлемента = "oval";
		КонецЕсли;
		
		лСодержимоеТекущейСекции = СтрЗаменить(Шаблон                  , "%id%"          , секция.Идентификатор);
		//лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%label%"       , ?(секция.Параметры = "", секция.Имя, секция.Параметры));
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%label%"       , секция.Имя);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%type%"        , лТипЭлемента);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%fill%"        , мЦветФонаЭлементаСекции);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%outlineWidth%", 1);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%height%"      , мВысотаЭлементаСекции);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%width%"       , СтрДлина(секция.Имя) * 7 + мВысотаЭлементаСекции * 2);
		
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%gid%", "gid """ + секция.идМодуля + """");
		
		лСодержимоеСекций = лСодержимоеСекций + лСодержимоеТекущейСекции;
		
		//////////////////////////////////////
		// формирование связей секции
		
		Шаблон = ПолучитьШаблон("СвязиСекции");
		
		Для Каждого СвязаннаяКоллекция Из секция.Вхождения Цикл
			
			////текстНадСтрелкой = "";
			//Для Каждого ВызовСПараметрами Из ВызываемаяСекция.ВызовыСПараметрами Цикл
			//	текстНадСтрелкой = ?(текстНадСтрелкой  = "", "", ",") + ВызовСПараметрами;
			//КонецЦикла;
			
			лСвязиТекущейСекцииСекции = СтрЗаменить(Шаблон                   , "%source%" , секция.Идентификатор);			
			лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%target%" , СвязаннаяКоллекция.Идентификатор);			
			лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%label%"  , СвязаннаяКоллекция.Количество);
			//лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%label%"  , "" + ВызываемаяСекция.Количество + ?(текстНадСтрелкой = "", "", "(" + текстНадСтрелкой + ")"));
			лСвязиСекций = лСвязиСекций + Символы.ПС + лСвязиТекущейСекцииСекции;
		КонецЦикла;
		
		Для Каждого СвязаннаяКоллекция Из секция.Родители Цикл
			
			////текстНадСтрелкой = "";
			//Для Каждого ВызовСПараметрами Из СвязаннаяКоллекция.ВызовыСПараметрами Цикл
			//	текстНадСтрелкой = ?(текстНадСтрелкой  = "", "", ",") + ВызовСПараметрами;
			//КонецЦикла;
			
			лСвязиТекущейСекцииСекции = СтрЗаменить(Шаблон                   , "%source%" , СвязаннаяКоллекция.Идентификатор);			
			лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%target%" , секция.Идентификатор);			
			лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%label%"  , СвязаннаяКоллекция.Количество);
			//лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%label%"  , "" + ВызываемаяСекция.Количество + ?(текстНадСтрелкой = "", "", "(" + текстНадСтрелкой + ")"));
			лСвязиСекций = лСвязиСекций + Символы.ПС + лСвязиТекущейСекцииСекции;
		КонецЦикла;
		
	КонецЦикла;
	
	Шаблон = ПолучитьШаблон("Общий");
	
	лТекстГрафа = СтрЗаменить(Шаблон     , "%СодержимоеСекций%", лСодержимоеСекций + Символы.ПС + лГруппы);
	лТекстГрафа = СтрЗаменить(лТекстГрафа, "%СвязиСекций%"     , лСвязиСекций);
	
	Возврат лТекстГрафа;
	
КонецФункции // ПолучитьТекстGML()

Функция ПолучитьШаблон(ИмяШаблона)
	
	//Описание: http://docs.yworks.com/yfiles/doc/developers-guide/gml.html#HierarchyExtension.graph.interedge_level
	// node: type                     - "ellipse"/"oval"/"circle", "rectangle", "triangle", "parallelogram", "hexagon", "diamond", "octagon", "roundrectangle", "rectangle3d", "trapezoid", "trapezoid2"
	// edge: type                     - "arc", "spline", "bezier", or "quadCurve"
	// edge: targetArrow, sourceArrow - "delta", "standard", "diamond", "short", "white_delta", "white_diamond", or "none"
	// edge: arrow                    - "last", "first", or "both"
	Если ИмяШаблона = "СвязиСекции" Тогда 
		Возврат 
			"	edge
			|	[
			|		source ""%source%""
			|		target ""%target%""
			|		label ""%label%""
			|		graphics
			|		[
			|		fill ""#000000""
			|		targetArrow	""standard""
			|		]
			|	]
			|";
	ИначеЕсли ИмяШаблона = "СодержимоеСекции" Тогда 
		Возврат 
			"	node
			|	[
			|		id	""%id%""
			|		label	""%label%""
			|		graphics
			|		[
			|			type	""%type%""
			|			fill	""%fill%""
			|			outline	""#000000""
			|			outlineWidth %outlineWidth%
			|			h %height%
			|			w %width%
			|		]
			|		%gid%
			|	]
			|";
	ИначеЕсли ИмяШаблона = "ГруппаМодуль" Тогда 
		Возврат 
			"	node
			|	[
			|		id	""%id%""
			|		label	""%label%""
			|		isGroup 1
			|	]
			|";		
	ИначеЕсли ИмяШаблона = "Общий" Тогда 
		Возврат
		"Creator ""lavelin.ru/code_structure""
		|Version 0.1
		|graph
		|[
		|	hierarchic 1
		|	label """"
		|	directed 1
		|%СодержимоеСекций%
		|%СвязиСекций%
		|]";
	Иначе
		Возврат ""
	КонецЕсли;
КонецФункции
	
Функция ЗаполнитьВхождения(Режим, ПомеченныеСекции, Результат)
	
	Попытка
		RegExp=новый COMОбъект("VBScript.RegExp");
	Исключение
		Предупреждение("Ошибка инициализации VBScript.RegExp.");
	КонецПопытки;
	RegExp.Multiline  = Истина;
	RegExp.Global     = Истина;
	RegExp.IgnoreCase = Истина;
	
	Для Каждого ПомеченнаяСекция Из ПомеченныеСекции Цикл 
		
		лЕстьРекурсивныйВызов = Ложь;
		лПомеченнаяСекцияЭлемент = мИсходныеДанные.Найти(ПомеченнаяСекция, "Идентификатор");
		
		лТекущаяСекцияДляДобавления = Результат.Найти(ПомеченнаяСекция, "Идентификатор");
		Если лТекущаяСекцияДляДобавления = Неопределено Тогда 
			лТекущаяСекцияДляДобавления = Результат.Добавить();
			лТекущаяСекцияДляДобавления.Вхождения = Новый Массив;
			лТекущаяСекцияДляДобавления.Родители  = Новый Массив;
		КонецЕсли;
		
		лСвязаннаяКоллекцияРодители  = Новый Массив;
		лСвязаннаяКоллекцияВхождения = Новый Массив;
		
		Для Каждого СекцияЭлемент Из мИсходныеДанные Цикл
			Если Режим = -1 Тогда 
				// где используется ПомеченнаяСекция
				
				лШаблон = лПомеченнаяСекцияЭлемент.Имя + "\(|""" + лПомеченнаяСекцияЭлемент.Имя + """";
				RegExp.Pattern = лШаблон;
				Массив = RegExp.Execute(СекцияЭлемент.Тело);
				
				КоличествоВхождений = Массив.Count();
				
				// добавляем либо рекурсию либо простые вхождения
				Если лПомеченнаяСекцияЭлемент.Имя = СекцияЭлемент.Имя И КоличествоВхождений > 1 ИЛИ лПомеченнаяСекцияЭлемент.Имя <> СекцияЭлемент.Имя И КоличествоВхождений > 0 Тогда 
					Если НЕ лЕстьРекурсивныйВызов тогда 
						лЕстьРекурсивныйВызов = (лПомеченнаяСекцияЭлемент.Имя = СекцияЭлемент.Имя);
					КонецЕсли;
					
					лСвязаннаяКоллекцияРодители.Добавить(Новый Структура("Количество, Имя, Идентификатор, Рекурсия", 
						КоличествоВхождений, 
						СекцияЭлемент.Имя, 
						СекцияЭлемент.Идентификатор, 
						лПомеченнаяСекцияЭлемент.Имя = СекцияЭлемент.Имя));
				КонецЕсли;	
				
			ИначеЕсли Режим = 1 Тогда 
				// что использует помеченная секция
				
				лШаблон = СекцияЭлемент.Имя + "\(|""" + СекцияЭлемент.Имя + """";
				RegExp.Pattern = лШаблон;
				Массив = RegExp.Execute(лПомеченнаяСекцияЭлемент.Тело);
				
				КоличествоВхождений = Массив.Count();
				
				// добавляем либо рекурсию либо простые вхождения
				Если СекцияЭлемент.Имя = лПомеченнаяСекцияЭлемент.Имя И КоличествоВхождений > 1 ИЛИ СекцияЭлемент.Имя <> лПомеченнаяСекцияЭлемент.Имя И КоличествоВхождений > 0 Тогда 
					Если НЕ лЕстьРекурсивныйВызов тогда 
						лЕстьРекурсивныйВызов = (СекцияЭлемент.Имя = лПомеченнаяСекцияЭлемент.Имя);
					КонецЕсли;
					
					////+++ получаем вызовы с параметрами
					//лОкончаниеБлока = ?(ДанныеПоСекцииГдеИщемЭлемент.Тип = "Процедура", "КонецПроцедуры", "КонецФункции");
					//лТелоДляАнализа = СокрЛП(Лев(Сокрлп(ДанныеПоСекцииГдеИщемЭлемент.Тело), СтрДлина(ДанныеПоСекцииГдеИщемЭлемент.Тело) - СтрДлина(?(ДанныеПоСекцииГдеИщемЭлемент.Тип = "Процедура", "КонецПроцедуры", "КонецФункции"))));
					//Если Прав(лТелоДляАнализа, 1) <> ";" Тогда 
					//	лТелоДляАнализа = лТелоДляАнализа + ";";
					//КонецЕсли;
					//
					//лШаблон = ДанныеПоСекцииЧтоИщем.Имя + "\(([^\;])*\)";
					//RegExp.Pattern = лШаблон;
					//Массив = RegExp.Execute(лТелоДляАнализа);
					//лВызовыСПараметрами = Новый Массив;
					//Для Сч = 0 по Массив.count() - 1 Цикл
					//	лВызовыСПараметрами.Добавить(СтрЗаменить(Массив.Item(Сч).Value, """", "'"));
					//КонецЦикла;
					////--- получаем вызовы с параметрами
					
					лСвязаннаяКоллекцияВхождения.Добавить(Новый Структура("Количество, Имя, Идентификатор, Рекурсия", 
						КоличествоВхождений,
						СекцияЭлемент.Имя, 
						СекцияЭлемент.Идентификатор, 
						СекцияЭлемент.Имя = лПомеченнаяСекцияЭлемент.Имя));
				КонецЕсли;					
			КонецЕсли;			
		КонецЦикла;		
		
		ЗаполнитьЗначенияСвойств(лТекущаяСекцияДляДобавления, Новый Структура("ИмяМодуля, идМодуля, Тип, Имя, Идентификатор, КоличествоВхождений, КоличествоРекурсий, Вхождения, Родители, Рекурсия",
					лПомеченнаяСекцияЭлемент.ИмяМодуля, 
					лПомеченнаяСекцияЭлемент.идМодуля, 
					лПомеченнаяСекцияЭлемент.Тип, 
					лПомеченнаяСекцияЭлемент.Имя, 
					ПомеченнаяСекция, 
					лСвязаннаяКоллекцияВхождения.Количество(), 
					лСвязаннаяКоллекцияРодители.Количество(), 
					лСвязаннаяКоллекцияВхождения, 
					лСвязаннаяКоллекцияРодители, 
					лЕстьРекурсивныйВызов))
		
	КонецЦикла;
	
	
	//Если Режим = -1 Тогда 
	//	//где используются помеченные секции
	//	Для Каждого ДанныеПоСекцииГдеИщем Из мИсходныеДанные Цикл
	//		
	//		лЕстьРекурсивныйВызов = Ложь;
	//		лСписокВхождений      = Новый Массив;
	//		Для Каждого ДанныеПоСекцииЧтоИщем Из ПомеченныеСекции Цикл
	//			
	//			ДанныеПоСекцииЧтоИщемЭлемент = мИсходныеДанные.Найти(ДанныеПоСекцииЧтоИщем, "Идентификатор");
	//			
	//			лШаблон = ДанныеПоСекцииЧтоИщемЭлемент.Имя + "\(|""" + ДанныеПоСекцииЧтоИщемЭлемент.Имя + """";
	//			RegExp.Pattern = лШаблон;
	//			Массив = RegExp.Execute(ДанныеПоСекцииГдеИщем.Тело);
	//			
	//			КоличествоВхождений = Массив.Count();
	//			
	//			// добавляем либо рекурсию либо простые вхождения
	//			Если ДанныеПоСекцииЧтоИщемЭлемент.Имя = ДанныеПоСекцииГдеИщем.Имя И КоличествоВхождений > 1 ИЛИ ДанныеПоСекцииЧтоИщемЭлемент.Имя <> ДанныеПоСекцииГдеИщем.Имя И КоличествоВхождений > 0 Тогда 
	//				Если НЕ лЕстьРекурсивныйВызов тогда 
	//					лЕстьРекурсивныйВызов = (ДанныеПоСекцииЧтоИщемЭлемент.Имя = ДанныеПоСекцииГдеИщем.Имя);
	//				КонецЕсли;
	//				лСписокВхождений.Добавить(Новый Структура("Количество, Секция, Идентификатор, Рекурсия", КоличествоВхождений, ДанныеПоСекцииЧтоИщемЭлемент.Имя, ДанныеПоСекцииЧтоИщемЭлемент.Идентификатор, ДанныеПоСекцииЧтоИщемЭлемент.Имя = ДанныеПоСекцииГдеИщем.Имя));
	//			КонецЕсли;	
	//		КонецЦикла;		
	//		
	//		Если лСписокВхождений.Количество() > 0 ИЛИ ПомеченныеСекции.Найти(ДанныеПоСекцииГдеИщем.Идентификатор) <> Неопределено Тогда 
	//			Результат.Добавить(Новый Структура("ИмяМодуля, идМодуля, Тип, Имя, Идентификатор, Количество, Вхождения, Рекурсия", 
	//				ДанныеПоСекцииГдеИщем.ИмяМодуля, 
	//				ДанныеПоСекцииГдеИщем.идМодуля, 
	//				ДанныеПоСекцииГдеИщем.Тип, 
	//				ДанныеПоСекцииГдеИщем.Имя, 
	//				ДанныеПоСекцииГдеИщем.Идентификатор, 
	//				лСписокВхождений.Количество(), 
	//				лСписокВхождений, 
	//				лЕстьРекурсивныйВызов));
	//		КонецЕсли;
	//	КонецЦикла;		
	//ИначеЕсли Режим = 1 Тогда 
	//	//что использует помеченные секции
	//	Для Каждого ДанныеПоСекцииГдеИщем Из ПомеченныеСекции Цикл
	//		лЕстьРекурсивныйВызов = Ложь;
	//		лСписокВхождений      = Новый Массив;
	//		ДанныеПоСекцииГдеИщемЭлемент = мИсходныеДанные.Найти(ДанныеПоСекцииГдеИщем, "Идентификатор");
	//		
	//		Для Каждого ДанныеПоСекцииЧтоИщем Из мИсходныеДанные Цикл
	//			
	//			лШаблон = ДанныеПоСекцииЧтоИщем.Имя + "\(|""" + ДанныеПоСекцииЧтоИщем.Имя + """";
	//			RegExp.Pattern = лШаблон;
	//			Массив = RegExp.Execute(ДанныеПоСекцииГдеИщемЭлемент.Тело);
	//			
	//			КоличествоВхождений = Массив.Count();
	//			
	//			// добавляем либо рекурсию либо простые вхождения
	//			Если ДанныеПоСекцииЧтоИщем.Имя = ДанныеПоСекцииГдеИщемЭлемент.Имя И КоличествоВхождений > 1 ИЛИ ДанныеПоСекцииЧтоИщем.Имя <> ДанныеПоСекцииГдеИщемЭлемент.Имя И КоличествоВхождений > 0 Тогда 
	//				Если НЕ лЕстьРекурсивныйВызов тогда 
	//					лЕстьРекурсивныйВызов = (ДанныеПоСекцииЧтоИщем.Имя = ДанныеПоСекцииГдеИщемЭлемент.Имя);
	//				КонецЕсли;
	//				
	//				////+++ получаем вызовы с параметрами
	//				//лОкончаниеБлока = ?(ДанныеПоСекцииГдеИщемЭлемент.Тип = "Процедура", "КонецПроцедуры", "КонецФункции");
	//				//лТелоДляАнализа = СокрЛП(Лев(Сокрлп(ДанныеПоСекцииГдеИщемЭлемент.Тело), СтрДлина(ДанныеПоСекцииГдеИщемЭлемент.Тело) - СтрДлина(?(ДанныеПоСекцииГдеИщемЭлемент.Тип = "Процедура", "КонецПроцедуры", "КонецФункции"))));
	//				//Если Прав(лТелоДляАнализа, 1) <> ";" Тогда 
	//				//	лТелоДляАнализа = лТелоДляАнализа + ";";
	//				//КонецЕсли;
	//				//
	//				//лШаблон = ДанныеПоСекцииЧтоИщем.Имя + "\(([^\;])*\)";
	//				//RegExp.Pattern = лШаблон;
	//				//Массив = RegExp.Execute(лТелоДляАнализа);
	//				//лВызовыСПараметрами = Новый Массив;
	//				//Для Сч = 0 по Массив.count() - 1 Цикл
	//				//	лВызовыСПараметрами.Добавить(СтрЗаменить(Массив.Item(Сч).Value, """", "'"));
	//				//КонецЦикла;
	//				////--- получаем вызовы с параметрами
	//				
	//				лСписокВхождений.Добавить(Новый Структура("Количество, Секция, Идентификатор, Рекурсия", 
	//				//лСписокВхождений.Добавить(Новый Структура("Количество, Секция, Идентификатор, ВызовыСПараметрами, Рекурсия", 
	//					КоличествоВхождений, 
	//					ДанныеПоСекцииЧтоИщем.Имя, 
	//					ДанныеПоСекцииЧтоИщем.Идентификатор, 
	//					//лВызовыСПараметрами, 
	//					ДанныеПоСекцииЧтоИщем.Имя = ДанныеПоСекцииГдеИщемЭлемент.Имя));
	//			КонецЕсли;	
	//		КонецЦикла;		
	//		
	//		Результат.Добавить(Новый Структура("ИмяМодуля, идМодуля, Тип, Имя, Параметры, Идентификатор, Количество, Вхождения, Рекурсия", 
	//			ДанныеПоСекцииГдеИщемЭлемент.ИмяМодуля, 
	//			ДанныеПоСекцииГдеИщемЭлемент.идМодуля, 
	//			ДанныеПоСекцииГдеИщемЭлемент.Тип, 
	//			ДанныеПоСекцииГдеИщемЭлемент.Имя, 
	//			ДанныеПоСекцииГдеИщемЭлемент.Параметры,
	//			ДанныеПоСекцииГдеИщемЭлемент.Идентификатор, 
	//			лСписокВхождений.Количество(), 
	//			лСписокВхождений, 
	//			лЕстьРекурсивныйВызов));			
	//	КонецЦикла;		
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьВхождения()

Процедура ДобавитьCекции(ИмяМодуля, ИдМодуля, ТекстМодуля, ИмяСекции, ИмяКонцаСекции)
	
	СписокСекций = Новый Массив;
	
	Попытка
		RegExp=новый COMОбъект("VBScript.RegExp");
	Исключение
		Предупреждение("Ошибка инициализации VBScript.RegExp.");
	КонецПопытки;
	RegExp.Multiline  = Истина;
	RegExp.Global     = Истина;
	RegExp.IgnoreCase = Истина;
	
	// формируем список секций
	лШаблон = "^%ИмяСекции%([^%ИмяКонцаСекции%].*\n+)+%ИмяКонцаСекции%";
	RegExp.Pattern = СтрЗаменить(СтрЗаменить(лШаблон, "%ИмяСекции%", ИмяСекции), "%ИмяКонцаСекции%", ИмяКонцаСекции);
	ТелаПроцедур = RegExp.Execute(ТекстМодуля);
	
	Для i = 0 по ТелаПроцедур.Count-1 Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ТелоСекции = ТелаПроцедур.Item(i).Value;
		
		// секция с параметрами
		лШаблон = "^%ИмяСекции%([^\)])+\)";
		RegExp.Pattern = СтрЗаменить(лШаблон, "%ИмяСекции%", ИмяСекции);
		Массив = RegExp.Execute(ТелоСекции);
		
		СекцияCПараметрами = Массив.Item(0).Value;
		
		// имя секции
		лШаблон = "^%ИмяСекции%([^\(])+\(";
		RegExp.Pattern = СтрЗаменить(лШаблон, "%ИмяСекции%", ИмяСекции);
		Массив = RegExp.Execute(СекцияCПараметрами);
		
		ИдентификаторСекции = СокрЛП(Сред(Массив.Item(0).Value, СтрДлина(ИмяСекции)+1, СтрДлина(Массив.Item(0).Value) - СтрДлина(ИмяСекции) - 1));
		
		// параметры
		лШаблон = "\(([^\)])+\)";
		RegExp.Pattern = лШаблон;
		Массив = RegExp.Execute(СекцияCПараметрами);
		
		Если Массив.count() > 0 Тогда 
			лПараметры = СтрЗаменить(Массив.Item(0).Value, Символы.ПС, " ");
			лПараметры = СокрЛП(лПараметры);
			лПараметры = Сред(лПараметры, 2, СтрДлина(лПараметры) - 2);
		Иначе
			лПараметры = "";
		КонецЕсли;
		
		НоваяСтрока = мИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура("ИмяМодуля, идМодуля, Тип, Имя, Параметры, Тело, Идентификатор", ИмяМодуля, ИдМодуля, ИмяСекции, ИдентификаторСекции, лПараметры, ТелоСекции, Строка(Новый УникальныйИдентификатор)));
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьCекции()

Процедура ОтметитьСвязанные(Режим)
	
	мДанныеОВхождениях = Новый ТаблицаЗначений;
	мДанныеОВхождениях.Колонки.Добавить("Идентификатор");
	мДанныеОВхождениях.Колонки.Добавить("ИмяМодуля");
	мДанныеОВхождениях.Колонки.Добавить("идМодуля");
	мДанныеОВхождениях.Колонки.Добавить("Тип");
	мДанныеОВхождениях.Колонки.Добавить("Имя");
	мДанныеОВхождениях.Колонки.Добавить("Количество");
	мДанныеОВхождениях.Колонки.Добавить("Вхождения");
	мДанныеОВхождениях.Колонки.Добавить("Родители");
	мДанныеОВхождениях.Колонки.Добавить("Рекурсия");
	
	лПомеченныеСекцииИсходные = Новый Массив;
	Для Каждого ЭлементФильтра Из Фильтр Цикл 
		Если ЭлементФильтра.Пометка Тогда 
			лПомеченныеСекцииИсходные.Добавить(ЭлементФильтра.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 1 По 2 Цикл
		
		лПомеченныеСекции = Новый Массив;
		Для Каждого ЭлементФильтра из лПомеченныеСекцииИсходные Цикл
			лПомеченныеСекции.Добавить(ЭлементФильтра);
		КонецЦикла;
		
		Если Режим = -1 и Сч = 2 ИЛИ Режим = 1 и Сч = 1 Тогда 
			Продолжить;
		КонецЕсли;
		
		НомерИтерации = 0;		
		
		Пока Истина Цикл
			
			НомерИтерации = НомерИтерации + 1;
			
			ЗаполнитьВхождения(?(Сч = 1, -1, 1), лПомеченныеСекции, мДанныеОВхождениях);
			
			ДобавленНовыйФлажок = Ложь;		
			Для Каждого секция Из мДанныеОВхождениях Цикл
				
				Если лПомеченныеСекции.Найти(секция.Идентификатор) = Неопределено Тогда 
					ДобавленНовыйФлажок = Истина;		
					лПомеченныеСекции.Добавить(секция.Идентификатор);
				КонецЕсли;
				
				Если Сч = 1 Тогда 
					СвязаннаяКоллекция = секция.Родители;
				Иначе
					СвязаннаяКоллекция = секция.Вхождения;
				КонецЕсли;
				
				Для Каждого СвязаннаяКоллекцияИД Из СвязаннаяКоллекция Цикл					
					Если лПомеченныеСекции.Найти(СвязаннаяКоллекцияИД.Идентификатор) = Неопределено Тогда 
						ДобавленНовыйФлажок = Истина;		
						лПомеченныеСекции.Добавить(СвязаннаяКоллекцияИД.Идентификатор);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если мМаксимальныйУровеньИтерации > 0 И НомерИтерации > мМаксимальныйУровеньИтерации Тогда 
				Прервать;
			КонецЕсли;
			
			Если Не ДобавленНовыйФлажок Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ИдСекции Из лПомеченныеСекции Цикл
			Фильтр.НайтиПоЗначению(ИдСекции).Пометка = Истина;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьИзФайла(ИмяФайла, Знач Адрес, Знач Размер)
	
	МаксимальныйРазмерБуфера = 5000;
	
	Результат = "";
	
	Файл = Новый ЧтениеДанных(ИмяФайла);
	Файл.Пропустить(Адрес);			
	Пока Размер > 0 Цикл
		
		ТекущийРазмер = Мин(Размер, МаксимальныйРазмерБуфера);

		РезультатЧтения = Файл.Прочитать(ТекущийРазмер);
		ЧтениеЧасти     = Новый ЧтениеТекста(РезультатЧтения.ОткрытьПотокДляЧтения(), "utf-8");
		
		Результат = Результат + ЧтениеЧасти.Прочитать();
		
		ЧтениеЧасти.Закрыть();
		
		Адрес = Адрес + ТекущийРазмер;
		Размер = Размер - ТекущийРазмер;
		
	КонецЦикла;
	Файл.Закрыть();		
		
	Возврат Результат;
	
КонецФункции // ПрочитатьИзФайла()

Функция ПолучитьКодИзФайлаBin(ИмяФайла)

	Файл = ФайловыеПотоки.ОткрытьДляЧтения(ИмяФайла);
	
	// инициализируем константы
	АдресНачалаБлока1                  = 18;
	АдресНачалаБлока3                  = 624;
	АдресНачалаБлока4                  = 691;
	СмещениеАдресаОкончанияБлокасКодом = 722;
	РазмерЧислаHex                     = 8;
	РазмерСтрокиСЧисламиHex            = РазмерЧислаHex * 3 + 2;
	СпециальноеЧислоHex                = "7fffffff";
	
	Если ПрочитатьИзФайла(ИмяФайла, АдресНачалаБлока1 + РазмерЧислаHex * 2 + 2, РазмерЧислаHex) <> СпециальноеЧислоHex Тогда 
		Возврат Неопределено
	КонецЕсли;
	
	// проверяем типа файла 
	ПоследнееЧислоБлока3 = ПрочитатьИзФайла(ИмяФайла, АдресНачалаБлока3 + РазмерЧислаHex * 2 + 2, РазмерЧислаHex);
	
	Если ПоследнееЧислоБлока3 = СпециальноеЧислоHex Тогда 
		// первый формат
		АдресНачалаБлокасКодом    = АдресНачалаБлока4 + РазмерСтрокиСЧисламиHex;
		ЗначениеHEX               = ПрочитатьИзФайла(ИмяФайла, АдресНачалаБлока4 + РазмерЧислаHex + 1, РазмерЧислаHex);
		АдресОкончанияБлокасКодом = ИзХСчислВDec(ЗначениеHEX) + СмещениеАдресаОкончанияБлокасКодом;
	Иначе
		// второй формат
		ЗначениеHEX               = ПрочитатьИзФайла(ИмяФайла, АдресНачалаБлока3 + РазмерЧислаHex + 1, РазмерЧислаHex);
		АдресНачалаБлокасКодом    = ИзХСчислВDec(ЗначениеHEX) + СмещениеАдресаОкончанияБлокасКодом + РазмерСтрокиСЧисламиHex;
		АдресОкончанияБлокасКодом = ИзХСчислВDec(ПоследнееЧислоБлока3);
	КонецЕсли;
	
	Возврат ПрочитатьИзФайла(ИмяФайла, АдресНачалаБлокасКодом, АдресОкончанияБлокасКодом - АдресНачалаБлокасКодом);
	
КонецФункции // ПолучитьКодИзФайлаBin()

// окончание асинхронных методов

Процедура ДиалогВыбораКаталогаСоСтруктуройЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда 
		// получаем список файлов
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайловЗавершение", ЭтаФорма), ВыбранныеФайлы[0], "Module.bsl", Истина);
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайловЗавершение", ЭтаФорма), ВыбранныеФайлы[0], "Form.bin", Истина);
	КонецЕсли;
	
КонецПроцедуры // ДиалогВыбораКаталогаСоСтруктуройЗавершение()

Процедура ДиалогВыбораФайлаСОбработкойДляВыгрузкиСтруктуры(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда 
		
		ВременныйФайл = Новый Файл(ВыбранныеФайлы[0]);
		
		КомандаКонфигуратора = "/DumpExternalDataProcessorOrReportToFiles """ + ДополнительныеПараметры.Диалог.Каталог + ВременныйФайл.ИмяБезРасширения + """ " + """" + ВыбранныеФайлы[0] + """";
		
		ИмяФайлаЛога = ПолучитьИмяВременногоФайла();
		
		ЗапуститьПриложение("""" + КаталогПрограммы() + "1cv8.exe"" DESIGNER /Out""" + ИмяФайлаЛога + """ " + КомандаКонфигуратора,, Истина);
		
		ТекстовыйДокументЛога = Новый ТекстовыйДокумент;
		ТекстовыйДокументЛога.Прочитать(ИмяФайлаЛога);
		ТекстовыйДокументЛога.Показать("Информация о выгрузке обработки в файлы");
		Попытка
			УдалитьФайлы(ИмяФайлаЛога);
		Исключение
		КонецПопытки;		
	КонецЕсли;	
КонецПроцедуры // ДиалогВыбораФайлаСОбработкойДляВыгрузкиСтруктуры()

Процедура НачатьПоискФайловЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	// загружаем тексты модулей
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		
		Массив = "Массив = Новый Массив;Массив.Добавить("""+СтрЗаменить(НайденныйФайл.Путь,"\",""");Массив.Добавить(""")+""");";
		Выполнить(Массив); 
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Если НайденныйФайл.Расширение = ".bin" Тогда 
			
			ТекстМодуля = ПолучитьКодИзФайлаBin(НайденныйФайл.ПолноеИмя);
			
			Если ТекстМодуля = Неопределено Тогда 
				Сообщить("Ошибка формата файла " + НайденныйФайл.ПолноеИмя, СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ТекстМодуля = СокрЛП(ТекстМодуля);
			Если СтрДлина(ТекстМодуля) = 0 Тогда 
				Продолжить;
			КонецЕсли;

			ИмяМодуля = Массив[Массив.Количество() - 3];
			
			НоваяСтрокаСМодулем = ТекстыМодулей.Найти(ИмяМодуля, "ИмяМодуля");
			
			Если НоваяСтрокаСМодулем = Неопределено Тогда 
				НоваяСтрокаСМодулем = ТекстыМодулей.Добавить();
				НоваяСтрокаСМодулем.ИмяМодуля   = ИмяМодуля;
			Иначе
				Сообщить("Перезаполнен модуль: " + ИмяМодуля);
			КонецЕсли;
			
			НоваяСтрокаСМодулем.Выбран      = Истина;
			НоваяСтрокаСМодулем.ТекстМодуля = ТекстМодуля;
			
		Иначе
			ИмяМодуля = ?(Массив[Массив.Количество() - 3] = "Ext", Массив[Массив.Количество() - 4], "МодульОбработки");
			
			ДополнительныеПараметры = Новый Структура("ИмяМодуля, ТекстовыйДокумент", ИмяМодуля, ТекстовыйДокумент);
			ТекстовыйДокумент.НачатьЧтение(Новый ОписаниеОповещения("НачатьЧтениеЗавершение", ЭтаФорма, ДополнительныеПараметры), НайденныйФайл.ПолноеИмя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьЧтениеЗавершение(ДополнительныеПараметры) Экспорт
	
	НоваяСтрокаСМодулем = ТекстыМодулей.Найти(ДополнительныеПараметры.ИмяМодуля, "ИмяМодуля");
	
	Если НоваяСтрокаСМодулем = Неопределено Тогда 
		НоваяСтрокаСМодулем = ТекстыМодулей.Добавить();
		НоваяСтрокаСМодулем.ИмяМодуля   = ДополнительныеПараметры.ИмяМодуля;
	Иначе
		Сообщить("Перезаполнен модуль: " + ДополнительныеПараметры.ИмяМодуля);
	КонецЕсли;
	
	НоваяСтрокаСМодулем.Выбран      = Истина;
	НоваяСтрокаСМодулем.ТекстМодуля = ДополнительныеПараметры.ТекстовыйДокумент.ПолучитьТекст();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	// формирование файла gml
	РабочийКаталог     = КаталогВременныхФайлов();
	ИмяТекстовогоФайла = РабочийКаталог + "graph.gml";
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(ПолучитьТекстGML());
	Текст.Записать(ИмяТекстовогоФайла, "windows-1251");
	ЗапуститьПриложение(ИмяТекстовогоФайла);
	
КонецПроцедуры // КнопкаВыполнитьНажатие()

Процедура КоманднаяПанель2Отметить(Кнопка)
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		ЭлементФильтра.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2СнятьОтметку(Кнопка)
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		ЭлементФильтра.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2Инвертировать(Кнопка)
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		ЭлементФильтра.Пометка = Не ЭлементФильтра.Пометка;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2ОтметитьМодули(Кнопка)
	Для Каждого ЭлементФильтра Из ТекстыМодулей Цикл
		ЭлементФильтра.Выбран = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель3ДобавитьМодулиИзВыгруженнойСтруктуры(Кнопка)
	
	// выбираем каталог с выгруженной структурой
	Диалог           = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru = 'Выберите каталог с выгруженными файлами обработки'");
	
	Диалог.Показать(Новый ОписаниеОповещения("ДиалогВыбораКаталогаСоСтруктуройЗавершение", ЭтаФорма));
	
КонецПроцедуры

Процедура КоманднаяПанель3ВыгрузитьОбработкуВФайлы(Кнопка)
	
	// выбираем файл для выгрузки структуры
	Диалог           = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Расширение = "*.epf;*.erf";
	Диалог.Заголовок = НСтр("ru = 'Выберите файл с обработкой или отчетом'");
	
	Диалог.Показать(Новый ОписаниеОповещения("ДиалогВыбораФайлаСОбработкойДляВыгрузкиСтруктуры", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

Процедура КоманднаяПанель2СнятьОтметкуСМодулей(Кнопка)
	Для Каждого ЭлементФильтра Из ТекстыМодулей Цикл
		ЭлементФильтра.Выбран = Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2ИнвертироватьОтметкиСМодулей(Кнопка)
	Для Каждого ЭлементФильтра Из ТекстыМодулей Цикл
		ЭлементФильтра.Выбран = Не ЭлементФильтра.Выбран;
	КонецЦикла;
КонецПроцедуры


Процедура ОсновныеДействияФормыЗаполнитьСписок(Кнопка)
	
	мИсходныеДанные.Очистить();
	Для Каждого текущийМодуль из ТекстыМодулей Цикл
		Если текущийМодуль.Выбран Тогда 
			ИдМодуля = Строка(Новый УникальныйИдентификатор);
			ДобавитьCекции(текущийМодуль.имяМодуля, ИдМодуля, текущийМодуль.текстМодуля, "Процедура", "КонецПроцедуры");
			ДобавитьCекции(текущийМодуль.имяМодуля, ИдМодуля, текущийМодуль.текстМодуля, "Функция"  , "КонецФункции");
		КонецЕсли;
	КонецЦикла;
	
	Фильтр.Очистить();
	Для Каждого Секция Из мИсходныеДанные Цикл
		Фильтр.Добавить(Секция.Идентификатор, Секция.Имя, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтметитьГдеИспользуется(Кнопка)
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ВыполнитьОтметкуСвязанныхПослеВводауровняИтерации", ЭтаФорма, Новый Структура("Режим", -1)), мМаксимальныйУровеньИтерации, "Введите максимальный уровень итерации", 5, 0);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтметитьЧтоИспользует(Кнопка)
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ВыполнитьОтметкуСвязанныхПослеВводауровняИтерации", ЭтаФорма, Новый Структура("Режим", 1)), мМаксимальныйУровеньИтерации, "Введите максимальный уровень итерации", 5, 0);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтметитьРекурсивноВОбеСтороны(Кнопка)
	
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ВыполнитьОтметкуСвязанныхПослеВводауровняИтерации", ЭтаФорма, Новый Структура("Режим", 0)), мМаксимальныйУровеньИтерации, "Введите максимальный уровень итерации", 5, 0);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТекстыМодулей

Процедура ТекстыМодулейПриАктивизацииСтроки(Элемент)
	
	лТекущиеДанные = ЭлементыФормы.ТекстыМодулей.ТекущиеДанные;
	
	Если лТекущиеДанные = Неопределено Тогда 
		ЭлементыФормы.ПолеТекстовогоДокумента.Очистить();
	Иначе
		ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(лТекущиеДанные.ТекстМодуля)
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстыМодулейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ЭлементыФормы.ТекстыМодулей.ТекущаяКолонка.Имя <> "Выбран" Тогда 
		ЭлементыФормы.ТекстыМодулей.ТекущиеДанные.Выбран = Истина;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВысотаЭлементаСекции   = 20;
мЦветФонаЭлементаСекции = "#FFFFFF";

мДанныеОВхождениях = Новый Соответствие;

мИсходныеДанные = Новый ТаблицаЗначений;
мИсходныеДанные.Колонки.Добавить("ИмяМодуля");
мИсходныеДанные.Колонки.Добавить("ИдМодуля");
мИсходныеДанные.Колонки.Добавить("Идентификатор");
мИсходныеДанные.Колонки.Добавить("Тип");
мИсходныеДанные.Колонки.Добавить("Имя");
мИсходныеДанные.Колонки.Добавить("Параметры");
мИсходныеДанные.Колонки.Добавить("Тело");

мИсходныеДанные.Индексы.Добавить("Идентификатор");