////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мИсходныеДанные, мВысотаЭлементаСекции, мЦветФонаЭлементаСекции, мДанныеОВхождениях;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьТекстGML()
	
	лГруппы            = "";
	лСодержимоеСекций  = "";
	лСвязиСекций       = "";
	лДобавлятьИдМодуля = ТекстыМодулей.Количество() > 1;

	лДобавленныеМодули = Новый Массив;
	Для Каждого секция Из мДанныеОВхождениях Цикл
		
		Если НЕ Фильтр.НайтиПоЗначению(секция.Идентификатор).Пометка Тогда 
			Продолжить;
		КонецЕсли;
		
		Если лДобавлятьИдМодуля И лДобавленныеМодули.Найти(секция.ИдМодуля) = Неопределено Тогда 
			лДобавленныеМодули.Добавить(секция.ИдМодуля);
			Шаблон = ПолучитьШаблон("ГруппаМодуль");
			лТекущаяГруппа = СтрЗаменить(Шаблон , "%id%"   , секция.ИдМодуля);
			лТекущаяГруппа = СтрЗаменить(лТекущаяГруппа, "%label%", секция.ИмяМодуля);
			лГруппы = лГруппы + Символы.ПС + лТекущаяГруппа
	 	КонецЕсли;
		
		//////////////////////////////////////
		// формирование содержимого секции
		
		// Тип, Имя, Количество, Вхождения, Рекурсия
		Шаблон = ПолучитьШаблон("СодержимоеСекции");
		
		Если секция.Тип = "Процедура" Тогда 
			лТипЭлемента = "rectangle";
		Иначе
			лТипЭлемента = "oval";
		КонецЕсли;
		
		лСодержимоеТекущейСекции = СтрЗаменить(Шаблон                  , "%id%"          , секция.Идентификатор);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%label%"       , секция.Имя);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%type%"        , лТипЭлемента);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%fill%"        , мЦветФонаЭлементаСекции);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%outlineWidth%", 1);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%height%"      , мВысотаЭлементаСекции);
		лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%width%"       , СтрДлина(секция.Имя) * 7 + мВысотаЭлементаСекции * 2);
		
		Если лДобавлятьИдМодуля Тогда 
			лСодержимоеТекущейСекции = СтрЗаменить(лСодержимоеТекущейСекции, "%gid%", "gid """ + секция.идМодуля + """");
		КонецЕсли;
		
		лСодержимоеСекций = лСодержимоеСекций + лСодержимоеТекущейСекции;
		
		//////////////////////////////////////
		// формирование связей секции
		
		Шаблон = ПолучитьШаблон("СвязиСекции");
		
		Для Каждого ВызываемаяСекция Из секция.Вхождения Цикл
			лСвязиТекущейСекцииСекции = СтрЗаменить(Шаблон                   , "%source%" , секция.Идентификатор);			
			лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%target%" , ВызываемаяСекция.Идентификатор);			
			лСвязиТекущейСекцииСекции = СтрЗаменить(лСвязиТекущейСекцииСекции, "%label%"  , ВызываемаяСекция.Количество);
			лСвязиСекций = лСвязиСекций + Символы.ПС + лСвязиТекущейСекцииСекции;
		КонецЦикла;
		
	КонецЦикла;
	
	Шаблон = ПолучитьШаблон("Общий");
	
	лТекстГрафа = СтрЗаменить(Шаблон     , "%СодержимоеСекций%", лСодержимоеСекций + Символы.ПС + лГруппы);
	лТекстГрафа = СтрЗаменить(лТекстГрафа, "%СвязиСекций%"     , лСвязиСекций);
	
	Возврат лТекстГрафа;
	
КонецФункции // ПолучитьТекстGML()

Функция ПолучитьШаблон(ИмяШаблона)
	
	//Описание: http://docs.yworks.com/yfiles/doc/developers-guide/gml.html#HierarchyExtension.graph.interedge_level
	// node: type                     - "ellipse"/"oval"/"circle", "rectangle", "triangle", "parallelogram", "hexagon", "diamond", "octagon", "roundrectangle", "rectangle3d", "trapezoid", "trapezoid2"
	// edge: type                     - "arc", "spline", "bezier", or "quadCurve"
	// edge: targetArrow, sourceArrow - "delta", "standard", "diamond", "short", "white_delta", "white_diamond", or "none"
	// edge: arrow                    - "last", "first", or "both"
	Если ИмяШаблона = "СвязиСекции" Тогда 
		Возврат 
			"	edge
			|	[
			|		source ""%source%""
			|		target ""%target%""
			|		label ""%label%""
			|		graphics
			|		[
			|		fill ""#000000""
			|		targetArrow	""standard""
			|		]
			|	]
			|";
	ИначеЕсли ИмяШаблона = "СодержимоеСекции" Тогда 
		Возврат 
			"	node
			|	[
			|		id	""%id%""
			|		label	""%label%""
			|		graphics
			|		[
			|			type	""%type%""
			|			fill	""%fill%""
			|			outline	""#000000""
			|			outlineWidth %outlineWidth%
			|			h %height%
			|			w %width%
			|		]
			|		%gid%
			|	]
			|";
	ИначеЕсли ИмяШаблона = "ГруппаМодуль" Тогда 
		Возврат 
			"	node
			|	[
			|		id	""%id%""
			|		label	""%label%""
			|		isGroup 1
			|	]
			|";		
	ИначеЕсли ИмяШаблона = "Общий" Тогда 
		Возврат
		"Creator ""lavelin.ru/code_structure""
		|Version 0.1
		|graph
		|[
		|	hierarchic 1
		|	label """"
		|	directed 1
		|%СодержимоеСекций%
		|%СвязиСекций%
		|]";
	Иначе
		Возврат ""
	КонецЕсли;
КонецФункции
	
Функция ЗаполнитьВхождения(Режим)
	
	Результат = Новый Массив;
	
	Попытка
		RegExp=новый COMОбъект("VBScript.RegExp");
	Исключение
		Предупреждение("Ошибка инициализации VBScript.RegExp.");
	КонецПопытки;
	RegExp.Multiline  = Истина;
	RegExp.Global     = Истина;
	RegExp.IgnoreCase = Истина;
	
	лПомеченныеСекции = Новый Массив;
	Для Каждого ЭлементФильтра Из Фильтр Цикл 
		Если ЭлементФильтра.Пометка Тогда 
			лПомеченныеСекции.Добавить(ЭлементФильтра.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если Режим = 1 Тогда 
		//где используются помеченные секции
		Для Каждого ДанныеПоСекцииГдеИщем Из мИсходныеДанные Цикл
			
			лЕстьРекурсивныйВызов = Ложь;
			лСписокВхождений      = Новый Массив;
			Для Каждого ДанныеПоСекцииЧтоИщем Из лПомеченныеСекции Цикл
				
				ДанныеПоСекцииЧтоИщемЭлемент = мИсходныеДанные.Найти(ДанныеПоСекцииЧтоИщем, "Идентификатор");
				
				лШаблон = ДанныеПоСекцииЧтоИщемЭлемент.Имя + "\(|""" + ДанныеПоСекцииЧтоИщемЭлемент.Имя + """";
				RegExp.Pattern = лШаблон;
				Массив = RegExp.Execute(ДанныеПоСекцииГдеИщем.Тело);
				
				КоличествоВхождений = Массив.Count();
				
				// добавляем либо рекурсию либо простые вхождения
				Если ДанныеПоСекцииЧтоИщемЭлемент.Имя = ДанныеПоСекцииГдеИщем.Имя И КоличествоВхождений > 1 ИЛИ ДанныеПоСекцииЧтоИщемЭлемент.Имя <> ДанныеПоСекцииГдеИщем.Имя И КоличествоВхождений > 0 Тогда 
					Если НЕ лЕстьРекурсивныйВызов тогда 
						лЕстьРекурсивныйВызов = (ДанныеПоСекцииЧтоИщемЭлемент.Имя = ДанныеПоСекцииГдеИщем.Имя);
					КонецЕсли;
					лСписокВхождений.Добавить(Новый Структура("Количество, Секция, Идентификатор, Рекурсия", КоличествоВхождений, ДанныеПоСекцииЧтоИщемЭлемент.Имя, ДанныеПоСекцииЧтоИщемЭлемент.Идентификатор, ДанныеПоСекцииЧтоИщемЭлемент.Имя = ДанныеПоСекцииГдеИщем.Имя));
				КонецЕсли;	
			КонецЦикла;		
			Результат.Добавить(Новый Структура("ИмяМодуля, идМодуля, Тип, Имя, Идентификатор, Количество, Вхождения, Рекурсия", ДанныеПоСекцииГдеИщем.ИмяМодуля, ДанныеПоСекцииГдеИщем.идМодуля, ДанныеПоСекцииГдеИщем.Тип, ДанныеПоСекцииГдеИщем.Имя, ДанныеПоСекцииГдеИщем.Идентификатор, лСписокВхождений.Количество(), лСписокВхождений, лЕстьРекурсивныйВызов));			
		КонецЦикла;		
	ИначеЕсли Режим = -1 Тогда 
		//что использует помеченные секции
		Для Каждого ДанныеПоСекцииГдеИщем Из лПомеченныеСекции Цикл
			лЕстьРекурсивныйВызов = Ложь;
			лСписокВхождений      = Новый Массив;
			ДанныеПоСекцииГдеИщемЭлемент = мИсходныеДанные.Найти(ДанныеПоСекцииГдеИщем, "Идентификатор");

			Для Каждого ДанныеПоСекцииЧтоИщем Из мИсходныеДанные Цикл
				
				лШаблон = ДанныеПоСекцииЧтоИщем.Имя + "\(|""" + ДанныеПоСекцииЧтоИщем.Имя + """";
				RegExp.Pattern = лШаблон;
				Массив = RegExp.Execute(ДанныеПоСекцииГдеИщемЭлемент.Тело);
				
				КоличествоВхождений = Массив.Count();
				
				// добавляем либо рекурсию либо простые вхождения
				Если ДанныеПоСекцииЧтоИщем.Имя = ДанныеПоСекцииГдеИщемЭлемент.Имя И КоличествоВхождений > 1 ИЛИ ДанныеПоСекцииЧтоИщем.Имя <> ДанныеПоСекцииГдеИщемЭлемент.Имя И КоличествоВхождений > 0 Тогда 
					Если НЕ лЕстьРекурсивныйВызов тогда 
						лЕстьРекурсивныйВызов = (ДанныеПоСекцииЧтоИщем.Имя = ДанныеПоСекцииГдеИщемЭлемент.Имя);
					КонецЕсли;
					лСписокВхождений.Добавить(Новый Структура("Количество, Секция, Идентификатор, Рекурсия", КоличествоВхождений, ДанныеПоСекцииЧтоИщем.Имя, ДанныеПоСекцииЧтоИщем.Идентификатор, ДанныеПоСекцииЧтоИщем.Имя = ДанныеПоСекцииГдеИщемЭлемент.Имя));
				КонецЕсли;	
			КонецЦикла;		
			Результат.Добавить(Новый Структура("ИмяМодуля, идМодуля, Тип, Имя, Идентификатор, Количество, Вхождения, Рекурсия", ДанныеПоСекцииГдеИщемЭлемент.ИмяМодуля, ДанныеПоСекцииГдеИщемЭлемент.идМодуля, ДанныеПоСекцииГдеИщемЭлемент.Тип, ДанныеПоСекцииГдеИщемЭлемент.Имя, ДанныеПоСекцииГдеИщемЭлемент.Идентификатор, лСписокВхождений.Количество(), лСписокВхождений, лЕстьРекурсивныйВызов));			
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции // ЗаполнитьВхождения()

Процедура ДобавитьCекции(ИмяМодуля, ИдМодуля, ТекстМодуля, ИмяСекции, ИмяКонцаСекции)
	
	СписокСекций = Новый Массив;
	
	Попытка
		RegExp=новый COMОбъект("VBScript.RegExp");
	Исключение
		Предупреждение("Ошибка инициализации VBScript.RegExp.");
	КонецПопытки;
	RegExp.Multiline  = Истина;
	RegExp.Global     = Истина;
	RegExp.IgnoreCase = Истина;
	
	// формируем список секций
	лШаблон = "^%ИмяСекции%([^%ИмяКонцаСекции%].*\n+)+%ИмяКонцаСекции%";
	RegExp.Pattern = СтрЗаменить(СтрЗаменить(лШаблон, "%ИмяСекции%", ИмяСекции), "%ИмяКонцаСекции%", ИмяКонцаСекции);
	ТелаПроцедур = RegExp.Execute(ТекстМодуля);
	
	Для i = 0 по ТелаПроцедур.Count-1 Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ТелоСекции = ТелаПроцедур.Item(i).Value;
		
		// секция с параметрами
		лШаблон = "^%ИмяСекции%([^\)])+\)";
		RegExp.Pattern = СтрЗаменить(лШаблон, "%ИмяСекции%", ИмяСекции);
		Массив = RegExp.Execute(ТелоСекции);
		
		СекцияCПараметрами = Массив.Item(0).Value;
		
		// имя секции
		лШаблон = "^%ИмяСекции%([^\(])+\(";
		RegExp.Pattern = СтрЗаменить(лШаблон, "%ИмяСекции%", ИмяСекции);
		Массив = RegExp.Execute(СекцияCПараметрами);
		
		ИдентификаторСекции = СокрЛП(Сред(Массив.Item(0).Value, СтрДлина(ИмяСекции)+1, СтрДлина(Массив.Item(0).Value) - СтрДлина(ИмяСекции) - 1));
		
		НоваяСтрока = мИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Новый Структура("ИмяМодуля, идМодуля, Тип, Имя, Параметры, Тело, Идентификатор", ИмяМодуля, ИдМодуля, ИмяСекции, ИдентификаторСекции, СекцияCПараметрами, ТелоСекции, Строка(Новый УникальныйИдентификатор)));
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьCекции()

Процедура ОтметитьСвязанные(Режим)
	
	НомерИтерации = 0;
	Пока Истина Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
		Для Сч = 1 По 2 Цикл
			
			Если Режим = -1 и Сч = 2 ИЛИ Режим = 1 и Сч = 1 Тогда 
				Продолжить;
			КонецЕсли;
			
			мДанныеОВхождениях = ЗаполнитьВхождения(?(Сч = 1, -1, 1));
			
			ДобавленНовыйФлажок = Ложь;		
			Для Каждого секция Из мДанныеОВхождениях Цикл
				
				Если секция.Количество = 0 И НЕ Фильтр.НайтиПоЗначению(секция.Идентификатор).Пометка Тогда 
					Продолжить;
				КонецЕсли;
				
				Если НЕ Фильтр.НайтиПоЗначению(секция.Идентификатор).Пометка Тогда 
					ДобавленНовыйФлажок = Истина;		
					Фильтр.НайтиПоЗначению(секция.Идентификатор).Пометка = Истина;
				КонецЕсли;
				
				Если Режим < 1 Тогда 
					
					Для Каждого СекцияВхождение Из секция.Вхождения Цикл
						
						Если НЕ Фильтр.НайтиПоЗначению(СекцияВхождение.Идентификатор).Пометка Тогда 
							ДобавленНовыйФлажок = Истина;		
							Фильтр.НайтиПоЗначению(СекцияВхождение.Идентификатор).Пометка= Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ДобавленНовыйФлажок Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	// формирование файла gml
	РабочийКаталог     = КаталогВременныхФайлов();
	ИмяТекстовогоФайла = РабочийКаталог + "graph.gml";
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(ПолучитьТекстGML());
	Текст.Записать(ИмяТекстовогоФайла, "windows-1251");
	ЗапуститьПриложение(ИмяТекстовогоФайла);
	
КонецПроцедуры // КнопкаВыполнитьНажатие()


Процедура КоманднаяПанель2Действие(Кнопка)
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		ЭлементФильтра.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2СнятьОтметку(Кнопка)
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		ЭлементФильтра.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2Действие1(Кнопка)
	Для Каждого ЭлементФильтра Из Фильтр Цикл
		ЭлементФильтра.Пометка = Не ЭлементФильтра.Пометка;
	КонецЦикла;
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаполнитьСписок(Кнопка)
	
	мИсходныеДанные.Очистить();
	Для Каждого текущийМодуль из ТекстыМодулей Цикл
		ИдМодуля = Строка(Новый УникальныйИдентификатор);
		ДобавитьCекции(текущийМодуль.имяМодуля, ИдМодуля, текущийМодуль.текстМодуля, "Процедура", "КонецПроцедуры");
		ДобавитьCекции(текущийМодуль.имяМодуля, ИдМодуля, текущийМодуль.текстМодуля, "Функция"  , "КонецФункции");
	КонецЦикла;
	
	Фильтр.Очистить();
	Для Каждого Секция Из мИсходныеДанные Цикл
		Фильтр.Добавить(Секция.Идентификатор, Секция.Имя, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтметитьГдеИспользуется(Кнопка)
	
	ОтметитьСвязанные(1);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтметитьЧтоИспользует(Кнопка)
	
	ОтметитьСвязанные(-1);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтметитьРекурсивноВОбеСтороны(Кнопка)
	
	ОтметитьСвязанные(0);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТекстыМодулей

Процедура ТекстыМодулейПриАктивизацииСтроки(Элемент)
	
	лТекущиеДанные = ЭлементыФормы.ТекстыМодулей.ТекущиеДанные;
	
	Если лТекущиеДанные = Неопределено Тогда 
		ЭлементыФормы.ПолеТекстовогоДокумента.Очистить();
	Иначе
		ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(лТекущиеДанные.ТекстМодуля)
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДанныеОВхождениях = Новый Массив;
мВысотаЭлементаСекции = 20;
мЦветФонаЭлементаСекции = "#FFFFFF";

мИсходныеДанные = Новый ТаблицаЗначений;
мИсходныеДанные.Колонки.Добавить("ИмяМодуля");
мИсходныеДанные.Колонки.Добавить("ИдМодуля");
мИсходныеДанные.Колонки.Добавить("Идентификатор");
мИсходныеДанные.Колонки.Добавить("Тип");
мИсходныеДанные.Колонки.Добавить("Имя");
мИсходныеДанные.Колонки.Добавить("Параметры");
мИсходныеДанные.Колонки.Добавить("Тело");

мИсходныеДанные.Индексы.Добавить("Идентификатор");